### INITIAL COMMENTS ###

#Fermat's Near Miss Formula Calculator

# Our program iterates through all x and y values, below a given k value, to find the smallest relative miss for Fermat's
# Near Miss formula. For each iteration, the program calculates x^n + y^n, and then solves for z^n, which is the closest
# value to x^n + y^n. After solving one iteration, the program then compares the new relative miss to the lowest; it will
# output and store if the new relative miss is lower, continuing until all iterations are finished and the lowest relative
# miss have been found.

#Stored in: main.py
#Created by: Ruby Radosevic and Carlos Manzo
#Contact at: rubyaradosevic@lewisu.edu and cmanzo20@stu.jjc.edu
#Course: Software Engineering 44000 - LT1
#Completed on: 02/11/2025


#NEAR_MISS_ITERATION: solves for z value, actual miss, and relative miss for one x and y value
def near_miss_iteration(n,x,y):
    left_side = x**n + y**n
    z=0

    #Takes larger between x and y as starting point, and continues to iterate through until z^2 >= left_side
    if x >= y:
        while z**n < left_side:
            z+= 1
    
    else:
        while z**n < left_side:
            z+= 1
    
    #Determines if z or z+1 is the closer near miss
    #Near_miss_iteration returns: x,y,z, actual miss, relative miss as a LIST
    if z**n - left_side < (z+1)**n - left_side:
        return ([x,y,z, (z**n - left_side), ((z**n - left_side) / left_side)])
    
    else:
        return ([x,y,z, ((z + 1)**n - left_side), (((z + 1)**n - left_side) / left_side)])
    
### MAIN PROGRAM ###
#Variable declaration
n=0
k=0
x=10
y=10
lowest_near_miss=100000
lowest_relative_miss=100000
lowest_list = []

#Prompt user for a valid input for n
while (n<2 or n>12):
    n=int(input("Please enter a power between 2 and 12 to use for n:\n"))

#Prompt user for a valid input for k
while (k<10 or k>500):
    k=int(input("Please enter an upper limit for k between 10 and 500 to use for k:\n"))  #500 is hard coded upper limit

#ITERATE through all possible x and y natural numbers, tracking lowest relative miss

#Outer x iteration
while(x<=k):

    #Iterate through every y value for given x
    while(y<=k):

        #Compares relative miss returned from near_miss_iteration against lowest_relative_miss value
        if(near_miss_iteration(n,x,y)[4] < lowest_relative_miss):

            #Updates lowest stored values for end input, and outputs newest relative miss
            lowest_list = near_miss_iteration(n,x,y)
            lowest_relative_miss = lowest_list[4]
            print("New lowest relative miss found!\nx = ", lowest_list[0], " y = ", lowest_list[1], "z = ", lowest_list[2], 
                  "Actual Miss: ", lowest_list[3], " Relative Miss: ", lowest_list[4]*100,"%")
        y+=1
    x+=1
    y= 10

#Prints final lowest values
print("The lowest found relative list is x = ", lowest_list[0], " y = ", lowest_list[1], "z = ", lowest_list[2], 
    "Actual Miss: ", lowest_list[3], " Relative Miss: ", lowest_list[4]*100,"%")
